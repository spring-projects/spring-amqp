buildscript {
	ext.kotlinVersion = '1.9.24'
	ext.isCI = System.getenv('GITHUB_ACTION')
	repositories {
		mavenCentral()
		gradlePluginPortal()
		maven { url 'https://repo.spring.io/plugins-release-local' }
		if (version.endsWith('SNAPSHOT')) {
			maven { url 'https://repo.spring.io/snapshot' }
		}
	}
	dependencies {
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
		classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"
	}
}

plugins {
	id 'base'
	id 'idea'
	id 'org.ajoberstar.grgit' version '5.2.2'
	id 'io.spring.nohttp' version '0.0.11'
	id 'io.spring.dependency-management' version '1.1.5' apply false
	id 'org.antora' version '1.0.0'
	id 'io.spring.antora.generate-antora-yml' version '0.0.1'
	id 'com.github.spotbugs' version '6.0.18'
}

description = 'Spring AMQP'

ext {
	linkHomepage = 'https://projects.spring.io/spring-amqp'
	linkCi       = 'https://build.spring.io/browse/AMQP'
	linkIssue    = 'https://jira.spring.io/browse/AMQP'
	linkScmUrl           = 'https://github.com/spring-projects/spring-amqp'
	linkScmConnection    = 'git://github.com/spring-projects/spring-amqp.git'
	linkScmDevConnection = 'git@github.com:spring-projects/spring-amqp.git'

	modifiedFiles =
            files()
                    .from {
                        files(grgit.status().unstaged.modified)
                                .filter { f -> f.name.endsWith('.java') || f.name.endsWith('.kt') }
                    }

	assertjVersion = '3.26.0'
	assertkVersion = '0.28.1'
	awaitilityVersion = '4.2.1'
	commonsCompressVersion = '1.26.2'
	commonsHttpClientVersion = '5.3.1'
	commonsPoolVersion = '2.12.0'
	hamcrestVersion = '2.2'
	hibernateValidationVersion = '8.0.1.Final'
	jacksonBomVersion = '2.17.2'
	jaywayJsonPathVersion = '2.9.0'
	junit4Version = '4.13.2'
	junitJupiterVersion = '5.11.0-M2'
	kotlinCoroutinesVersion = '1.8.1'
	log4jVersion = '2.23.1'
	logbackVersion = '1.5.6'
	lz4Version = '1.8.0'
	micrometerDocsVersion = '1.0.2'
	micrometerVersion = '1.14.0-SNAPSHOT'
	micrometerTracingVersion = '1.4.0-SNAPSHOT'
	mockitoVersion = '5.12.0'
	rabbitmqStreamVersion = '0.15.0'
	rabbitmqVersion = '5.21.0'
	reactorVersion = '2024.0.0-SNAPSHOT'
	snappyVersion = '1.1.10.5'
	springDataVersion = '2024.1.0-SNAPSHOT'
	springRetryVersion = '2.0.6'
	springVersion = '6.2.0-SNAPSHOT'
	testcontainersVersion = '1.19.8'
	zstdJniVersion = '1.5.6-3'

	javaProjects = subprojects - project(':spring-amqp-bom')
}



antora {
	version = '3.2.0-alpha.2'
	playbook = file('src/reference/antora/antora-playbook.yml')
	options = ['to-dir' : project.layout.buildDirectory.dir('site').get().toString(), clean: true, fetch: !project.gradle.startParameter.offline, stacktrace: true]
	dependencies = [
			'@antora/atlas-extension': '1.0.0-alpha.1',
			'@antora/collector-extension': '1.0.0-alpha.3',
			'@asciidoctor/tabs': '1.0.0-beta.3',
			'@springio/antora-extensions': '1.11.1',
			'@springio/asciidoctor-extensions': '1.0.0-alpha.10',
	]
}

tasks.named('generateAntoraYml') {
	asciidocAttributes = project.provider( {
		return ['project-version' : project.version ]
	} )
	baseAntoraYmlFile = file('src/reference/antora/antora.yml')
}

tasks.create(name: 'createAntoraPartials', type: Sync) {
	from { tasks.filterMetricsDocsContent.outputs }
	into layout.buildDirectory.dir('generated-antora-resources/modules/ROOT/partials')
}

tasks.create('generateAntoraResources') {
	dependsOn 'createAntoraPartials'
	dependsOn 'generateAntoraYml'
}

nohttp {
	source.include '**/src/**'
	source.exclude '**/*.gif', '**/*.ks'
}

allprojects {
	group = 'org.springframework.amqp'

	apply plugin: 'io.spring.dependency-management'

	dependencyManagement {
		resolutionStrategy {
			cacheChangingModulesFor 0, 'seconds'
		}
		applyMavenExclusions = false
		generatedPomCustomization {
			enabled = false
		}

		imports {
			mavenBom "com.fasterxml.jackson:jackson-bom:$jacksonBomVersion"
			mavenBom "org.junit:junit-bom:$junitJupiterVersion"
			mavenBom "org.springframework:spring-framework-bom:$springVersion"
			mavenBom "io.projectreactor:reactor-bom:$reactorVersion"
			mavenBom "org.apache.logging.log4j:log4j-bom:$log4jVersion"
			mavenBom "org.springframework.data:spring-data-bom:$springDataVersion"
			mavenBom "io.micrometer:micrometer-bom:$micrometerVersion"
			mavenBom "io.micrometer:micrometer-tracing-bom:$micrometerTracingVersion"
			mavenBom "org.testcontainers:testcontainers-bom:$testcontainersVersion"
		}
	}

	repositories {
		mavenCentral()
		maven { url 'https://repo.spring.io/milestone' }
		if (version.endsWith('-SNAPSHOT')) {
			maven { url 'https://repo.spring.io/snapshot' }
			// maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
		}
//		maven { url 'https://repo.spring.io/libs-staging-local' }
	}
}

ext {
	expandPlaceholders = '**/quick-tour.xml'
	javadocLinks = [
		'https://docs.oracle.com/en/java/javase/17/docs/api/',
		'https://jakarta.ee/specifications/platform/9/apidocs/',
		'https://docs.spring.io/spring-framework/docs/current/javadoc-api/'
	] as String[]
}

configure(javaProjects) { subproject ->
	apply plugin: 'java-library'
	apply plugin: 'java'
	apply from:   "${rootProject.projectDir}/gradle/publish-maven.gradle"
	apply plugin: 'eclipse'
	apply plugin: 'idea'
	apply plugin: 'project-report'
	apply plugin: 'checkstyle'
	apply plugin: 'kotlin'
	apply plugin: 'kotlin-spring'

	java {
		withJavadocJar()
		withSourcesJar()
		registerFeature('optional') {
			usingSourceSet(sourceSets.main)
		}
		registerFeature('provided') {
			usingSourceSet(sourceSets.main)
		}
	}

	compileJava {
		sourceCompatibility = 17
		targetCompatibility = 17
	}

	compileTestJava {
		sourceCompatibility = 17
		targetCompatibility = 17
		options.encoding = 'UTF-8'
	}

	eclipse {
		project {
			natures += 'org.springframework.ide.eclipse.core.springnature'
		}
	}

	// dependencies that are common across all java projects
	dependencies {
		def spotbugsAnnotations = "com.github.spotbugs:spotbugs-annotations:${spotbugs.toolVersion.get()}"
		compileOnly spotbugsAnnotations
		testCompileOnly spotbugsAnnotations

		testImplementation 'org.apache.logging.log4j:log4j-core'
		testImplementation "org.hamcrest:hamcrest-core:$hamcrestVersion"
		testImplementation ("org.mockito:mockito-core:$mockitoVersion") {
			exclude group: 'org.hamcrest', module: 'hamcrest-core'
		}
		testImplementation "org.mockito:mockito-junit-jupiter:$mockitoVersion"
		testImplementation 'org.springframework:spring-test'

		testRuntimeOnly 'org.apache.logging.log4j:log4j-jcl'

		testImplementation 'org.junit.jupiter:junit-jupiter-api'
		testImplementation 'org.junit.jupiter:junit-jupiter-params'
		testImplementation 'org.junit.jupiter:junit-jupiter-engine'
		testImplementation 'org.junit.platform:junit-platform-launcher'
		testImplementation("org.awaitility:awaitility:$awaitilityVersion") {
			exclude group: 'org.hamcrest'
		}

		// To avoid compiler warnings about @API annotations in JUnit code
		testCompileOnly 'org.apiguardian:apiguardian-api:1.0.0'

		testImplementation 'org.jetbrains.kotlin:kotlin-reflect'
		testImplementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'


	}

	// enable all compiler warnings; individual projects may customize further
	ext.xLintArg = '-Xlint:all,-options,-processing,-deprecation'
	[compileJava, compileTestJava]*.options*.compilerArgs = [xLintArg]

	publishing {
		publications {
			mavenJava(MavenPublication) {
				suppressAllPomMetadataWarnings()
				from components.java
				pom.withXml {
					def pomDeps = asNode().dependencies.first()
					subproject.configurations.providedImplementation.allDependencies.each { dep ->
						pomDeps.remove(pomDeps.'*'.find { it.artifactId.text() == dep.name })
						pomDeps.appendNode('dependency').with {
							it.appendNode('groupId', dep.group)
							it.appendNode('artifactId', dep.name)
							it.appendNode('version', dep.version)
							it.appendNode('scope', 'provided')
						}
					}
				}
			}
		}
	}

	task updateCopyrights {
		onlyIf { !isCI }
		inputs.files(modifiedFiles.filter { f -> f.path.contains(subproject.name) })
		outputs.dir('build/classes')

		doLast {
			def now = Calendar.instance.get(Calendar.YEAR) as String
			inputs.files.each { file ->
				def line
				file.withReader { reader ->
					while (line = reader.readLine()) {
						def matcher = line =~ /Copyright (20\d\d)-?(20\d\d)?/
						if (matcher.count) {
							def beginningYear = matcher[0][1]
							if (now != beginningYear && now != matcher[0][2]) {
								def years = "$beginningYear-$now"
								def sourceCode = file.getText('UTF-8')
								sourceCode = sourceCode.replaceFirst(/20\d\d(-20\d\d)?/, years)
								file.text = sourceCode
								println "Copyright updated for file: $file"
							}
							break
						}
					}
				}
			}
		}
	}

	compileKotlin.dependsOn updateCopyrights

	tasks.withType(JavaForkOptions) {
		jvmArgs '--add-opens', 'java.base/java.util.zip=ALL-UNNAMED'
	}

	tasks.withType(Javadoc) {
		options.addBooleanOption('Xdoclint:syntax', true) // only check syntax with doclint
		options.addBooleanOption('Werror', true) // fail build on Javadoc warnings
	}

	test {
		maxHeapSize = '2g'
		jvmArgs '-XX:+HeapDumpOnOutOfMemoryError'

		testLogging {
			events "skipped", "failed"
			showStandardStreams = project.hasProperty("showStandardStreams") ?: false
			showExceptions = true
			showStackTraces = true
			exceptionFormat = 'full'
		}
	}

	task testAll(type: Test, dependsOn: check)

	gradle.taskGraph.whenReady { graph ->
		if (graph.hasTask(testAll)) {
			test.enabled = false
		}
	}

	tasks.withType(Test).all {
		// suppress all console output during testing unless running `gradle -i`
		logging.captureStandardOutput(LogLevel.INFO)

		if (name ==~ /(testAll)/) {
			systemProperty 'RUN_LONG_INTEGRATION_TESTS', 'true'
		}
		environment "SPRING_AMQP_DESERIALIZATION_TRUST_ALL", "true"

		useJUnitPlatform()
	}

	checkstyle {
		configDirectory.set(rootProject.file("src/checkstyle"))
		toolVersion = '10.8.0'
	}

	jar {
		manifest {
			attributes(
					'Implementation-Version': archiveVersion,
					'Created-By': "JDK ${System.properties['java.version']} (${System.properties['java.specification.vendor']})",
					'Implementation-Title': subproject.name,
					'Implementation-Vendor-Id': subproject.group,
					'Implementation-Vendor': 'VMware Inc.',
					'Implementation-URL': linkHomepage,
					'Automatic-Module-Name': subproject.name.replace('-', '.')  // for Jigsaw
			)
		}

		from("${rootProject.projectDir}/src/dist") {
			include 'notice.txt'
			into 'META-INF'
			expand(copyright: new Date().format('yyyy'), version: project.version)
		}
		from("${rootProject.projectDir}") {
			include 'LICENSE.txt'
			into 'META-INF'
		}
	}

	check.dependsOn javadoc

}

project('spring-amqp') {
	description = 'Spring AMQP Core'

	dependencies {

		api 'org.springframework:spring-core'
		optionalApi 'org.springframework:spring-messaging'
		optionalApi 'org.springframework:spring-oxm'
		optionalApi 'org.springframework:spring-context'
		api ("org.springframework.retry:spring-retry:$springRetryVersion") {
			exclude group: 'org.springframework'
		}

		optionalApi 'com.fasterxml.jackson.core:jackson-core'
		optionalApi 'com.fasterxml.jackson.core:jackson-databind'
		optionalApi 'com.fasterxml.jackson.core:jackson-annotations'
		optionalApi 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'
		optionalApi 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'
		optionalApi 'com.fasterxml.jackson.module:jackson-module-parameter-names'
		optionalApi 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
		optionalApi 'com.fasterxml.jackson.datatype:jackson-datatype-joda'
		optionalApi ('com.fasterxml.jackson.module:jackson-module-kotlin') {
			exclude group: 'org.jetbrains.kotlin'
		}
		// Spring Data projection message binding support
		optionalApi ('org.springframework.data:spring-data-commons') {
			exclude group: 'org.springframework'
			exclude group: 'io.micrometer'
		}
		optionalApi "com.jayway.jsonpath:json-path:$jaywayJsonPathVersion"

		testImplementation "org.assertj:assertj-core:$assertjVersion"
	}

}

project('spring-amqp-bom') {
	description = 'Spring for RabbitMQ (Bill of Materials)'

	apply plugin: 'java-platform'
	apply from: "${rootDir}/gradle/publish-maven.gradle"

	dependencies {
		constraints {
			javaProjects.sort { "$it.name" }.each {
				api it
			}
		}
	}

	publishing {
		publications {
			mavenJava(MavenPublication) {
				from components.javaPlatform
			}
		}
	}
}

project('spring-rabbit') {
	description = 'Spring RabbitMQ Support'

	configurations {
		adoc
	}

	dependencies {

		api project(':spring-amqp')
		api "com.rabbitmq:amqp-client:$rabbitmqVersion"
		optionalApi 'org.springframework:spring-aop'
		api 'org.springframework:spring-context'
		api 'org.springframework:spring-messaging'
		api 'org.springframework:spring-tx'
		optionalApi 'org.springframework:spring-webflux'
		optionalApi "org.apache.httpcomponents.client5:httpclient5:$commonsHttpClientVersion"
		optionalApi 'io.projectreactor:reactor-core'
		optionalApi 'io.projectreactor.netty:reactor-netty-http'
		optionalApi "ch.qos.logback:logback-classic:$logbackVersion"
		optionalApi 'org.apache.logging.log4j:log4j-core'
		optionalApi 'io.micrometer:micrometer-core'
		api 'io.micrometer:micrometer-observation'
		optionalApi 'io.micrometer:micrometer-tracing'
		// Spring Data projection message binding support
		optionalApi ("org.springframework.data:spring-data-commons") {
			exclude group: 'org.springframework'
		}
		optionalApi "com.jayway.jsonpath:json-path:$jaywayJsonPathVersion"
		optionalApi "org.apache.commons:commons-pool2:$commonsPoolVersion"
		optionalApi "org.jetbrains.kotlinx:kotlinx-coroutines-reactor:$kotlinCoroutinesVersion"

		testApi project(':spring-rabbit-junit')
		testImplementation("com.willowtreeapps.assertk:assertk-jvm:$assertkVersion")
		testImplementation "org.hibernate.validator:hibernate-validator:$hibernateValidationVersion"
		testImplementation 'io.micrometer:micrometer-observation-test'
		testImplementation 'io.micrometer:micrometer-tracing-bridge-brave'
		testImplementation 'io.micrometer:micrometer-tracing-test'
		testImplementation 'io.micrometer:micrometer-tracing-integration-test'
		testImplementation "org.testcontainers:rabbitmq"
		testImplementation 'org.testcontainers:junit-jupiter'
		testImplementation "org.apache.httpcomponents.client5:httpclient5:$commonsHttpClientVersion"
		testRuntimeOnly 'com.fasterxml.jackson.core:jackson-core'
		testRuntimeOnly 'com.fasterxml.jackson.core:jackson-databind'
		testRuntimeOnly 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'
		testRuntimeOnly 'com.fasterxml.jackson.module:jackson-module-kotlin'
		testRuntimeOnly ("junit:junit:$junit4Version") {
			exclude group: 'org.hamcrest', module: 'hamcrest-core'

		}

	}

	compileKotlin {
		compilerOptions {
			allWarningsAsErrors = true
		}
	}

}

project('spring-rabbit-stream') {
	description = 'Spring RabbitMQ Stream Support'

	dependencies {

		api project(':spring-rabbit')
		api "com.rabbitmq:stream-client:$rabbitmqStreamVersion"
		optionalApi 'io.micrometer:micrometer-core'

		testApi project(':spring-rabbit-junit')
		testRuntimeOnly 'com.fasterxml.jackson.core:jackson-core'
		testRuntimeOnly 'com.fasterxml.jackson.core:jackson-databind'
		testRuntimeOnly 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'
		testRuntimeOnly 'com.fasterxml.jackson.module:jackson-module-kotlin'
		testRuntimeOnly "org.apache.commons:commons-compress:$commonsCompressVersion"
		testRuntimeOnly "org.xerial.snappy:snappy-java:$snappyVersion"
		testRuntimeOnly "org.lz4:lz4-java:$lz4Version"
		testRuntimeOnly "com.github.luben:zstd-jni:$zstdJniVersion"
		testImplementation "org.testcontainers:rabbitmq"
		testImplementation "org.testcontainers:junit-jupiter"
		testImplementation "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion"
		testImplementation 'org.springframework:spring-webflux'
		testImplementation 'io.micrometer:micrometer-observation-test'
		testImplementation 'io.micrometer:micrometer-tracing-bridge-brave'
		testImplementation 'io.micrometer:micrometer-tracing-test'
		testImplementation 'io.micrometer:micrometer-tracing-integration-test'
	}

}

project('spring-rabbit-junit') {
	description = 'Spring Rabbit JUnit Support'

	dependencies { // no spring-amqp dependencies allowed

		api 'org.springframework:spring-core'
		api 'org.springframework:spring-test'
		optionalApi ("junit:junit:$junit4Version") {
			exclude group: 'org.hamcrest', module: 'hamcrest-core'
		}
		api "com.rabbitmq:amqp-client:$rabbitmqVersion"
		api 'org.springframework:spring-web'
		api 'org.junit.jupiter:junit-jupiter-api'
		api "org.assertj:assertj-core:$assertjVersion"
		optionalApi "org.testcontainers:rabbitmq"
		optionalApi "org.testcontainers:junit-jupiter"
		optionalApi "ch.qos.logback:logback-classic:$logbackVersion"
		optionalApi 'org.apache.logging.log4j:log4j-core'
		compileOnly 'org.apiguardian:apiguardian-api:1.0.0'
	}

}

project('spring-rabbit-test') {
	description = 'Spring Rabbit Test Support'

	dependencies {

		api project(':spring-rabbit')
		api project(':spring-rabbit-junit')
		api "org.hamcrest:hamcrest-library:$hamcrestVersion"
		api "org.hamcrest:hamcrest-core:$hamcrestVersion"
		api "org.mockito:mockito-core:$mockitoVersion"
		testImplementation project(':spring-rabbit').sourceSets.test.output
	}

}

configurations {
	micrometerDocs
}

dependencies {
	micrometerDocs "io.micrometer:micrometer-docs-generator:$micrometerDocsVersion"
}

def observationInputDir = file('build/docs/microsources').absolutePath
def generatedDocsDir = file('build/docs/generated').absolutePath

task copyObservation(type: Copy) {
	from file('spring-rabbit/src/main/java/org/springframework/amqp/rabbit/support/micrometer').absolutePath
	from file('spring-rabbit-stream/src/main/java/org/springframework/rabbit/stream/micrometer').absolutePath
	include '*.java'
	exclude 'package-info.java'
	into observationInputDir
}

task generateObservabilityDocs(type: JavaExec) {
	dependsOn copyObservation
	mainClass = 'io.micrometer.docs.DocsGeneratorCommand'
	inputs.dir(observationInputDir)
	outputs.dir(generatedDocsDir)
	classpath configurations.micrometerDocs
	args observationInputDir, /.+/, generatedDocsDir
}

task filterMetricsDocsContent(type: Copy) {
	dependsOn generateObservabilityDocs
	from generatedDocsDir
	include '_*.adoc'
	into generatedDocsDir
	rename { filename -> filename.replace '_', '' }
	filter { line -> line.replaceAll('org.springframework.*.micrometer.', '').replaceAll('^Fully qualified n', 'N') }
}

task api(type: Javadoc) {
	group = 'Documentation'
	description = 'Generates aggregated Javadoc API documentation.'
	title = "${rootProject.description} ${version} API"
	options {
		encoding = 'UTF-8'
		memberLevel = JavadocMemberLevel.PROTECTED
		author = true
		header = rootProject.description
		use = true
		overview = 'src/api/overview.html'
		splitIndex = true
		links(project.ext.javadocLinks)
		addBooleanOption('Xdoclint:syntax', true) // only check syntax with doclint
	}

	source javaProjects.collect { project ->
		project.sourceSets.main.allJava
	}
	destinationDir = new File(buildDir, 'api')
	classpath = files(javaProjects.collect { project ->
		project.sourceSets.main.compileClasspath
	})
}

task schemaZip(type: Zip) {
	group = 'Distribution'
	archiveClassifier = 'schema'
	description = "Builds -${archiveClassifier} archive containing all " +
		"XSDs for deployment at static.springframework.org/schema."

	javaProjects.each { subproject ->
		def Set files = new HashSet()
		def Properties schemas = new Properties();
		def shortName = subproject.name.replaceFirst("${rootProject.name}-", '')

		if (subproject.name.endsWith('-rabbit')) {
			shortName = 'rabbit'
		}

		subproject.sourceSets.main.resources.find {
			it.path.endsWith("META-INF${File.separator}spring.schemas")
		}?.withInputStream { schemas.load(it) }

		for (def key : schemas.keySet()) {
			File xsdFile = subproject.sourceSets.main.resources.find {
				it.path.replaceAll('\\\\', '/').endsWith(schemas.get(key))
			}
			assert xsdFile != null
			if (!files.contains(xsdFile.path)) {
				into ("${shortName}") {
					from xsdFile.path
					rename { String fileName ->
						String[] versionNumbers = project.version.split(/\./, 3)
						fileName.replace('.xsd', "-${versionNumbers[0]}.${versionNumbers[1]}.xsd")
					}
				}
				files.add(xsdFile.path)
			}
		}
	}
}

task docsZip(type: Zip) {
		group = 'Distribution'
		archiveClassifier = 'docs'
		description = "Builds -${archiveClassifier} archive containing api and reference " +
			"for deployment at static.springframework.org/spring-integration/docs."

		from('src/dist') {
			include 'changelog.txt'
		}

		from (api) {
			into 'api'
		}
}

task distZip(type: Zip, dependsOn: [docsZip, schemaZip]) {
	group = 'Distribution'
	archiveClassifier = 'dist'
	description = "Builds -${archiveClassifier} archive, containing all jars and docs, " +
		"suitable for community download page."

	ext.baseDir = "${project.name}-${project.version}";

	from('src/dist') {
		include 'README.md'
		include 'notice.txt'
		into "${baseDir}"
	}

	from("$project.rootDir") {
		include 'LICENSE.txt'
		into "${baseDir}"
	}

	from(zipTree(docsZip.archiveFile)) {
		into "${baseDir}/docs"
	}

	from(zipTree(schemaZip.archiveFile)) {
		into "${baseDir}/schema"
	}

	javaProjects.each { subproject ->
		into ("${baseDir}/libs") {
			from subproject.jar
			from subproject.sourcesJar
			from subproject.javadocJar
		}
	}

	from(project(':spring-amqp-bom').generatePomFileForMavenJavaPublication) {
		into "${baseDir}/libs"
		rename 'pom-default.xml', "spring-amqp-bom-${project.version}.xml"
	}

}

// Create an optional "with dependencies" distribution.
// Not published by default; only for use when building from source.
task depsZip(type: Zip, dependsOn: distZip) { zipTask ->
	group = 'Distribution'
	archiveClassifier = 'dist-with-deps'
	description = "Builds -${archiveClassifier} archive, containing everything " +
		"in the -${distZip.archiveClassifier} archive plus all dependencies."

	from zipTree(distZip.archiveFile)

	gradle.taskGraph.whenReady { taskGraph ->
		if (taskGraph.hasTask(":${zipTask.name}")) {
			def projectNames = rootProject.subprojects*.name
			def artifacts = new HashSet()
			subprojects.each { subproject ->
				subproject.configurations.runtime.resolvedConfiguration.resolvedArtifacts.each { artifact ->
					def dependency = artifact.moduleVersion.id
					if (!projectNames.contains(dependency.name)) {
						artifacts << artifact.file
					}
				}
			}

			zipTask.from(artifacts) {
				into "${distZip.baseDir}/deps"
			}
		}
	}
}

tasks.build.dependsOn assemble

artifacts {
	archives distZip
	archives docsZip
	archives schemaZip
}

task dist(dependsOn: assemble) {
	group = 'Distribution'
	description = 'Builds -dist, -docs and -schema distribution archives.'
}

apply from: "${rootProject.projectDir}/gradle/publish-maven.gradle"

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact docsZip
			artifact schemaZip
			artifact distZip
		}
	}
}
